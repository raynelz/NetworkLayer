//
//  File.swift
//  NetworkLayer
//
//  Created by –ó–∞—Ö–∞—Ä –õ–∏—Ç–≤–∏–Ω—á—É–∫ on 13.03.2025.
//

import Foundation

@MainActor
public protocol NetworkClient {
	func sendRequest<T: Decodable>(_ request: NetworkRequest) async throws -> T
}

@MainActor
public final class DefaultNetworkClient: NetworkClient {
	
	// MARK: - Private properties
	
	private let urlSession: URLSession
	private let decoder: JSONDecoder
	private let isLoggingEnabled: Bool
	
	public init(
		urlSession: URLSession = .shared,
		decoder: JSONDecoder = JSONDecoder(),
		isLoggingEnabled: Bool = true
	) {
		self.urlSession = urlSession
		self.decoder = decoder
		self.isLoggingEnabled = isLoggingEnabled
	}
	
	public func sendRequest<T>(_ request: NetworkRequest) async throws -> T where T : Decodable {
		// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
		logRequest(request)
		
		var urlRequest = URLRequest(url: request.url)
		urlRequest.httpMethod = request.method.rawValue
		
		// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
		if let headers = request.headers {
			for (key, value) in headers {
				urlRequest.setValue(value, forHTTPHeaderField: key)
			}
		}
		
		urlRequest.httpBody = request.body
		
		do {
			log("‚¨ÜÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: \(request.url.absoluteString)")
			let startTime = Date()
			let (data, response) = try await urlSession.data(for: urlRequest)
			let timeInterval = Date().timeIntervalSince(startTime)
			log("‚¨áÔ∏è –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ \(String(format: "%.3f", timeInterval))—Å")
			
			// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
			logResponse(data: data, response: response)
			
			guard let httpResponse = response as? HTTPURLResponse else {
				log("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (–Ω–µ HTTPURLResponse)")
				throw APIError.network(NSError(domain: "Invalid response", code: -1))
			}
			
			guard (200...299).contains(httpResponse.statusCode) else {
				log("‚ùå –û—à–∏–±–∫–∞ HTTP —Å—Ç–∞—Ç—É—Å–∞: \(httpResponse.statusCode)")
				if let responseString = String(data: data, encoding: .utf8) {
					log("üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ —Å –æ—à–∏–±–∫–æ–π: \(responseString)")
				}
				throw APIError.invalidResponse(statusCode: httpResponse.statusCode)
			}
			
			log("üîÑ –ù–∞—á–∞–ª–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–∏–ø: \(T.self)")
			do {
				let decodedResponse = try decoder.decode(T.self, from: data)
				log("‚úÖ –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
				return decodedResponse
			} catch {
				log("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: \(error)")
				if let decodingError = error as? DecodingError {
					logDecodingError(decodingError, data: data)
				}
				throw APIError.decoding(error as? DecodingError ?? DecodingError.dataCorrupted(DecodingError.Context(codingPath: [], debugDescription: "Unknown decoding error", underlyingError: error)))
			}
		} catch let urlError as URLError {
			log("‚ùå –û—à–∏–±–∫–∞ URL-—Å–µ—Å—Å–∏–∏: \(urlError.localizedDescription), –∫–æ–¥: \(urlError.code.rawValue)")
			throw APIError.network(urlError)
		} catch let apiError as APIError {
			// –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º APIError –¥–∞–ª—å—à–µ –±–µ–∑ –æ–±–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
			throw apiError
		} catch {
			log("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: \(error.localizedDescription)")
			throw APIError.network(error)
		}
	}
	
	// MARK: - Logging methods
	
	private func log(_ message: String) {
		if isLoggingEnabled {
			print("üì° NetworkClient: \(message)")
		}
	}
	
	private func logRequest(_ request: NetworkRequest) {
		guard isLoggingEnabled else { return }
		
		log("üì§ –ó–ê–ü–†–û–° ‚û°Ô∏è \(request.method.rawValue) \(request.url.absoluteString)")
		
		if let headers = request.headers, !headers.isEmpty {
			log("üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏:")
			for (key, value) in headers {
				log("   \(key): \(value)")
			}
		}
		
		if let body = request.body {
			log("üì¶ –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ (\(body.count) –±–∞–π—Ç):")
			if let bodyString = String(data: body, encoding: .utf8) {
				log("   \(bodyString)")
			} else {
				log("   [–î–≤–æ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ]")
			}
			
			// –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å JSON –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ
			do {
				if let jsonObject = try JSONSerialization.jsonObject(with: body, options: []) as? [String: Any] {
					let prettyData = try JSONSerialization.data(withJSONObject: jsonObject, options: .prettyPrinted)
					if let prettyString = String(data: prettyData, encoding: .utf8) {
						log("üìù JSON –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ:")
						log("   \(prettyString)")
					}
				}
			} catch {
				log("   –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å JSON: \(error.localizedDescription)")
			}
		}
	}
	
	private func logResponse(data: Data, response: URLResponse) {
		guard isLoggingEnabled else { return }
		
		if let httpResponse = response as? HTTPURLResponse {
			log("üì• –û–¢–í–ï–¢ ‚¨ÖÔ∏è \(httpResponse.statusCode) \(HTTPURLResponse.localizedString(forStatusCode: httpResponse.statusCode))")
			log("üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:")
			for (key, value) in httpResponse.allHeaderFields {
				log("   \(key): \(value)")
			}
		}
		
		log("üì¶ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ (\(data.count) –±–∞–π—Ç):")
		if let responseString = String(data: data, encoding: .utf8) {
			if responseString.count > 1000 {
				log("   \(responseString.prefix(1000))... [–æ–±—Ä–µ–∑–∞–Ω–æ, –ø–æ–ª–Ω—ã–π —Ä–∞–∑–º–µ—Ä: \(responseString.count) —Å–∏–º–≤–æ–ª–æ–≤]")
			} else {
				log("   \(responseString)")
			}
			
			// –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å JSON –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ
			do {
				if let jsonObject = try JSONSerialization.jsonObject(with: data, options: []) as? [String: Any] {
					let prettyData = try JSONSerialization.data(withJSONObject: jsonObject, options: .prettyPrinted)
					if let prettyString = String(data: prettyData, encoding: .utf8) {
						log("üìù JSON –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ:")
						if prettyString.count > 1000 {
							log("   \(prettyString.prefix(1000))... [–æ–±—Ä–µ–∑–∞–Ω–æ]")
						} else {
							log("   \(prettyString)")
						}
					}
				}
			} catch {
				log("   –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å JSON: \(error.localizedDescription)")
			}
		} else {
			log("   [–î–≤–æ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ]")
		}
	}
	
	private func logDecodingError(_ error: DecodingError, data: Data) {
		guard isLoggingEnabled else { return }
		
		log("üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:")
		
		switch error {
		case .typeMismatch(let type, let context):
			log("   –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–∏–ø–∞: –æ–∂–∏–¥–∞–ª—Å—è \(type), –ø—É—Ç—å: \(context.codingPath.map { $0.stringValue }.joined(separator: "."))")
			log("   –û–ø–∏—Å–∞–Ω–∏–µ: \(context.debugDescription)")
			if let underlyingError = context.underlyingError {
				log("   –ë–∞–∑–æ–≤–∞—è –æ—à–∏–±–∫–∞: \(underlyingError)")
			}
			
		case .valueNotFound(let type, let context):
			log("   –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: –¥–ª—è —Ç–∏–ø–∞ \(type), –ø—É—Ç—å: \(context.codingPath.map { $0.stringValue }.joined(separator: "."))")
			log("   –û–ø–∏—Å–∞–Ω–∏–µ: \(context.debugDescription)")
			if let underlyingError = context.underlyingError {
				log("   –ë–∞–∑–æ–≤–∞—è –æ—à–∏–±–∫–∞: \(underlyingError)")
			}
			
		case .keyNotFound(let key, let context):
			log("   –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω: \(key.stringValue), –ø—É—Ç—å: \(context.codingPath.map { $0.stringValue }.joined(separator: "."))")
			log("   –û–ø–∏—Å–∞–Ω–∏–µ: \(context.debugDescription)")
			if let underlyingError = context.underlyingError {
				log("   –ë–∞–∑–æ–≤–∞—è –æ—à–∏–±–∫–∞: \(underlyingError)")
			}
			
		case .dataCorrupted(let context):
			log("   –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –ø—É—Ç—å: \(context.codingPath.map { $0.stringValue }.joined(separator: "."))")
			log("   –û–ø–∏—Å–∞–Ω–∏–µ: \(context.debugDescription)")
			if let underlyingError = context.underlyingError {
				log("   –ë–∞–∑–æ–≤–∞—è –æ—à–∏–±–∫–∞: \(underlyingError)")
			}
			
		@unknown default:
			log("   –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: \(error)")
		}
		
		// –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É JSON –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
		do {
			if let json = try JSONSerialization.jsonObject(with: data, options: []) as? [String: Any] {
				log("üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ JSON:")
				logJSONStructure(json, indent: 3)
			}
		} catch {
			log("   –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å JSON –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏: \(error)")
		}
	}
	
	private func logJSONStructure(_ json: Any, indent: Int = 0, maxDepth: Int = 3, currentDepth: Int = 0) {
		guard currentDepth <= maxDepth else {
			log(String(repeating: " ", count: indent) + "... [–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞]")
			return
		}
		
		let indentation = String(repeating: " ", count: indent)
		
		if let dictionary = json as? [String: Any] {
			for (key, value) in dictionary {
				let valueType = type(of: value)
				if value is [Any] || value is [String: Any] {
					log("\(indentation)\(key) [\(valueType)]:")
					logJSONStructure(value, indent: indent + 3, maxDepth: maxDepth, currentDepth: currentDepth + 1)
				} else {
					let valueString = String(describing: value).prefix(100)
					log("\(indentation)\(key) [\(valueType)]: \(valueString)")
				}
			}
		} else if let array = json as? [Any] {
			log("\(indentation)–ú–∞—Å—Å–∏–≤ [\(array.count) —ç–ª–µ–º–µ–Ω—Ç–æ–≤]:")
			if !array.isEmpty {
				// –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –±–æ–ª—å—à–∏—Ö –º–∞—Å—Å–∏–≤–æ–≤
				let itemsToLog = min(array.count, 3)
				for i in 0..<itemsToLog {
					log("\(indentation)[\(i)]:")
					logJSONStructure(array[i], indent: indent + 3, maxDepth: maxDepth, currentDepth: currentDepth + 1)
				}
				if array.count > itemsToLog {
					log("\(indentation)... –∏ –µ—â–µ \(array.count - itemsToLog) —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
				}
			}
		} else {
			log("\(indentation)\(json)")
		}
	}
}
